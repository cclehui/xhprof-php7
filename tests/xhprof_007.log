
---- EXPECTED OUTPUT
Part 1: Default Flags
hello: this is a test
hello: Arraytest
Part 1 output:
foo==>bar                               : ct=       2; wt=*;
foo==>strlen                            : ct=       1; wt=*;
foo_array==>bar                         : ct=       2; wt=*;
foo_array==>strlen                      : ct=       1; wt=*;
main()                                  : ct=       1; wt=*;
main()==>foo                            : ct=       1; wt=*;
main()==>foo_array                      : ct=       1; wt=*;
main()==>xhprof_disable                 : ct=       1; wt=*;

Part 2a: Ignore call_user_func
hello: user_func test
Part 2a output:
foo==>bar                               : ct=       2; wt=*;
foo==>strlen                            : ct=       1; wt=*;
main()                                  : ct=       1; wt=*;
main()==>test_call_user_func::test_call_user_func: ct=       1; wt=*;
main()==>xhprof_disable                 : ct=       1; wt=*;
test_call_user_func::test_call_user_func==>foo: ct=       1; wt=*;

Part 2b: Standard profile without parameters
hello: user_func test
Part 2b output:
call_user_func==>foo                    : ct=       1; wt=*;
foo==>bar                               : ct=       2; wt=*;
foo==>strlen                            : ct=       1; wt=*;
main()                                  : ct=       1; wt=*;
main()==>test_call_user_func::test_call_user_func: ct=       1; wt=*;
main()==>xhprof_disable                 : ct=       1; wt=*;
test_call_user_func::test_call_user_func==>call_user_func: ct=       1; wt=*;

Part 2c: Standard profile with empty array of ignored functions
hello: user_func test
Part 2c output:
call_user_func==>foo                    : ct=       1; wt=*;
foo==>bar                               : ct=       2; wt=*;
foo==>strlen                            : ct=       1; wt=*;
main()                                  : ct=       1; wt=*;
main()==>test_call_user_func::test_call_user_func: ct=       1; wt=*;
main()==>xhprof_disable                 : ct=       1; wt=*;
test_call_user_func::test_call_user_func==>call_user_func: ct=       1; wt=*;

Part 3: Ignore call_user_func_array
hello: calling foo_array
Part 3 output:
foo_array==>bar                         : cpu=*; ct=       2; wt=*;
foo_array==>strlen                      : cpu=*; ct=       1; wt=*;
main()                                  : cpu=*; ct=       1; wt=*;
main()==>test_call_user_func_array      : cpu=*; ct=       1; wt=*;
main()==>xhprof_disable                 : cpu=*; ct=       1; wt=*;
test_call_user_func_array==>foo_array   : cpu=*; ct=       1; wt=*;

Part 4: Ignore my_call_user_func_safe
hello: Array
Part 4 output:
foo==>bar                               : ct=       2; wt=*;
foo==>strlen                            : ct=       1; wt=*;
main()                                  : ct=       1; wt=*;
main()==>test_my_call_user_func_safe    : ct=       1; wt=*;
main()==>xhprof_disable                 : ct=       1; wt=*;
test_my_call_user_func_safe==>foo       : ct=       1; wt=*;
test_my_call_user_func_safe==>is_callable: ct=       1; wt=*;

Part 5a: Ignore my_call_user_func_array_safe and strlen
hello: my_user_func_array_safetest
Part 5a output:
foo_array==>bar                         : ct=       2; mu=*; pmu=*; wt=*;
main()                                  : ct=       1; mu=*; pmu=*; wt=*;
main()==>test_my_call_user_func_array_safe: ct=       1; mu=*; pmu=*; wt=*;
main()==>xhprof_disable                 : ct=       1; mu=*; pmu=*; wt=*;
test_my_call_user_func_array_safe==>foo_array: ct=       1; mu=*; pmu=*; wt=*;
test_my_call_user_func_array_safe==>is_callable: ct=       1; mu=*; pmu=*; wt=*;

Part 5b: Profile call_user_func_array and my_call_user_func_array_safe
hello: my_user_func_array_safetest
Part 5b output:
call_user_func_array==>foo_array        : ct=       1; mu=*; pmu=*; wt=*;
foo_array==>bar                         : ct=       2; mu=*; pmu=*; wt=*;
foo_array==>strlen                      : ct=       1; mu=*; pmu=*; wt=*;
main()                                  : ct=       1; mu=*; pmu=*; wt=*;
main()==>test_my_call_user_func_array_safe: ct=       1; mu=*; pmu=*; wt=*;
main()==>xhprof_disable                 : ct=       1; mu=*; pmu=*; wt=*;
my_call_user_func_array_safe==>call_user_func_array: ct=       1; mu=*; pmu=*; wt=*;
my_call_user_func_array_safe==>is_callable: ct=       1; mu=*; pmu=*; wt=*;
test_my_call_user_func_array_safe==>my_call_user_func_array_safe: ct=       1; mu=*; pmu=*; wt=*;

Part 5c: Only ignore call_user_func_array
hello: my_user_func_array_safetest
Part 5c output:
call_user_func_array==>foo_array        : ct=       1; mu=*; pmu=*; wt=*;
foo_array==>bar                         : ct=       2; mu=*; pmu=*; wt=*;
foo_array==>strlen                      : ct=       1; mu=*; pmu=*; wt=*;
main()                                  : ct=       1; mu=*; pmu=*; wt=*;
main()==>test_my_call_user_func_array_safe: ct=       1; mu=*; pmu=*; wt=*;
main()==>xhprof_disable                 : ct=       1; mu=*; pmu=*; wt=*;
test_my_call_user_func_array_safe==>call_user_func_array: ct=       1; mu=*; pmu=*; wt=*;
test_my_call_user_func_array_safe==>is_callable: ct=       1; mu=*; pmu=*; wt=*;
---- ACTUAL OUTPUT
Deprecated: Methods with the same name as their class will not be constructors in a future version of PHP; test_call_user_func has a deprecated constructor in /home/cclehui/php/php-7.1.15/ext/xhprof/extension/tests/xhprof_007.php on line 52
Part 1: Default Flags
/usr/local/php/bin/php: symbol lookup error: /home/cclehui/php/php-7.1.15/ext/xhprof/extension/modules/xhprof.so: undefined symbol: MAKE_STD_ZVAL
---- FAILED
